from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class BuyProxyStates(StatesGroup):
    ChoosingType = State()
    ChoosingCountry = State()
    ChoosingDuration = State()
    ChoosingQuantity = State()
    Confirming = State()

def get_main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì¶ –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏"), KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    kb.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_main_menu())

# === –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ ===

@dp.message_handler(lambda m: m.text == "üì¶ –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏", state='*')
async def buy_proxy_start(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("IPv4"), KeyboardButton("IPv6"), KeyboardButton("Mobile"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:", reply_markup=kb)
    await BuyProxyStates.ChoosingType.set()

@dp.message_handler(state=BuyProxyStates.ChoosingType)
async def choose_type(message: types.Message, state: FSMContext):
    await state.update_data(proxy_type=message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–£–∫—Ä–∞–∏–Ω–∞"), KeyboardButton("–ì–µ—Ä–º–∞–Ω–∏—è"), KeyboardButton("–°–®–ê"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=kb)
    await BuyProxyStates.ChoosingCountry.set()

@dp.message_handler(state=BuyProxyStates.ChoosingCountry)
async def choose_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("1 –¥–µ–Ω—å"), KeyboardButton("7 –¥–Ω–µ–π"), KeyboardButton("30 –¥–Ω–µ–π"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=kb)
    await BuyProxyStates.ChoosingDuration.set()

@dp.message_handler(state=BuyProxyStates.ChoosingDuration)
async def choose_duration(message: types.Message, state: FSMContext):
    await state.update_data(duration=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏:", reply_markup=ReplyKeyboardRemove())
    await BuyProxyStates.ChoosingQuantity.set()

@dp.message_handler(state=BuyProxyStates.ChoosingQuantity)
async def choose_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(quantity=int(message.text))
    data = await state.get_data()

    summary = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"–¢–∏–ø: {data['proxy_type']}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
        f"–°—Ä–æ–∫: {data['duration']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"
    )
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    await message.answer(summary, reply_markup=kb)
    await BuyProxyStates.Confirming.set()

@dp.message_handler(lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", state=BuyProxyStates.Confirming)
async def confirm_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_menu())
    await state.finish()

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞", state=BuyProxyStates.Confirming)
async def cancel_order(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
    await state.finish()

# –§–æ–ª–±—ç–∫ ‚Äî –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(state='*')
async def fallback(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
